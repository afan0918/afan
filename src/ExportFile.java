/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author Afan Chen
 */

import javax.swing.*;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import static javax.swing.UIManager.setLookAndFeel;

/**
 * @author Afan Chen
 */
public class ExportFile extends javax.swing.JFrame {

    /**
     * Creates new form ExportFile
     */
    public ExportFile() {
        try {
            setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }

        setTitle("Export File");
        java.awt.Dimension scr_size = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((scr_size.width - 412) / 2, (scr_size.height - 452) / 2);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        FilePath = new javax.swing.JTextField();
        FilePicker = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        ExportROCCurve = new javax.swing.JCheckBox();
        ExportModel = new javax.swing.JCheckBox();
        ExportLineChart = new javax.swing.JCheckBox();
        Save = new javax.swing.JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        jLabel1.setText("File Path");

        FilePath.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        FilePath.setText("");

        FilePicker.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        FilePicker.setText("File Picker");
        FilePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilePickerActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        jLabel3.setText("Export Profile Settings");

        ExportROCCurve.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        ExportROCCurve.setText("Export ROC curve");

        ExportModel.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        ExportModel.setText("Export the training model");

        ExportLineChart.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        ExportLineChart.setText("Export Line Chart");

        Save.setFont(new java.awt.Font("微軟正黑體", 0, 16)); // NOI18N
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ExportLineChart)
                                        .addComponent(ExportROCCurve)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(FilePicker))
                                        .addComponent(ExportModel))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Save)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(FilePicker)
                                        .addComponent(FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(ExportModel)
                                .addGap(2, 2, 2)
                                .addComponent(ExportROCCurve)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ExportLineChart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                                .addComponent(Save)
                                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>

    private String ChoosePath(String Path) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showSaveDialog(null);
        String path = "";
        if (result == JFileChooser.APPROVE_OPTION) {
            path = fileChooser.getSelectedFile().getAbsolutePath();
        }
        return path;
    }

    private void FilePickerActionPerformed(java.awt.event.ActionEvent evt) {
        String path = ChoosePath(FilePath.getText());
        FilePath.setText(path);
    }

    /**
     * 將訓練出的邏輯回歸模型進行存檔動作
     *
     * @param Path         存檔目的地路徑
     * @param combinations
     * @param FScore
     * @param Sensitivity
     * @param Specificity
     * @param DataTitle
     * @param weight
     */

    private void SaveLRModel(String Path, ArrayList<int[]> combinations, ArrayList<Double> FScore, ArrayList<Double> Sensitivity, ArrayList<Double> Specificity, String[] DataTitle, ArrayList<double[]> weight) throws IOException {
        BufferedWriter fw = null;

        fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(Path, true), StandardCharsets.UTF_8)); // 指定編碼格式，以免中文字符異常
        fw.write("Combinations,Fscore,Sensitivity,Specificity");

        for (int i = 0; i < DataTitle.length; i++) {
            fw.append(",").append(DataTitle[i]);
        }

        fw.newLine();

        for (int i = 0; i < combinations.size(); i++) {
            fw.append(String.valueOf(combinations.get(i).length));
            fw.append(",").append(String.valueOf(FScore.get(i)));
            fw.append(",").append(String.valueOf(Sensitivity.get(i)));
            fw.append(",").append(String.valueOf(Specificity.get(i)));
            int c = 0;
            for (int j = 0; j < combinations.get(i).length; j++) {
                for (int k = c; k < combinations.get(i)[j] - 1; k++) fw.append(",");
                c = combinations.get(i)[j];
                fw.append(",").append(String.valueOf(weight.get(i)[j]));
            }
            fw.newLine();
        }

        fw.flush(); // 全部寫入緩存中的內容

        if (fw != null) {
            try {
                fw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    private void SaveSVMModel(String Path, ArrayList<int[]> combinations, ArrayList<Double> FScore, ArrayList<Double> Sensitivity, ArrayList<Double> Specificity, String[] DataTitle, ArrayList<double[]> weight, ArrayList<Double> Bias) throws IOException {
        BufferedWriter fw = null;
        fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(Path, true), StandardCharsets.UTF_8)); // 指定編碼格式，以免中文字符異常
        fw.write("Combinations,Fscore,Sensitivity,Specificity,Bias");

        for (int i = 0; i < DataTitle.length; i++) {
            fw.append(",").append(DataTitle[i]);
        }

        fw.newLine();

        for (int i = 0; i < combinations.size(); i++) {
            fw.append(String.valueOf(combinations.get(i).length));
            fw.append(",").append(String.valueOf(FScore.get(i)));
            fw.append(",").append(String.valueOf(Sensitivity.get(i)));
            fw.append(",").append(String.valueOf(Specificity.get(i)));
            fw.append(",").append(String.valueOf(Bias.get(i)));
            int c = 0;
            for (int j = 0; j < combinations.get(i).length; j++) {
                for (int k = c; k < combinations.get(i)[j] - 1; k++) fw.append(",");
                c = combinations.get(i)[j];
                fw.append(",").append(String.valueOf(weight.get(i)[j]));
            }
            fw.newLine();
        }

        fw.flush(); // 全部寫入緩存中的內容

        if (fw != null) {
            try {
                fw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    private void SaveROCCurve(String Path, String[] DataTitle, ArrayList<Double> auc, ArrayList<Double> CutOffPoints) throws IOException {
        BufferedWriter fw = null;
        fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(Path, true), StandardCharsets.UTF_8)); // 指定編碼格式，以免中文字符異常
        fw.write(" ");

        for (int i = 1; i < DataTitle.length; i++) {
            fw.append(",").append(DataTitle[i]);
        }

        fw.newLine();

        fw.append("Cut-off point value");

        for (int i = 0; i < CutOffPoints.size(); i++) {
            fw.append(",").append(String.valueOf(CutOffPoints.get(i)));
        }

        fw.newLine();

        fw.append("AUC");

        for (int i = 0; i < CutOffPoints.size(); i++) {
            fw.append(",").append(String.valueOf(auc.get(i)));
        }

        fw.flush(); // 全部寫入緩存中的內容

        if (fw != null) {
            try {
                fw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }



    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {
        boolean flag=true;
        if(ExportModel.isSelected()&&GUI.logisticRegressionMethod!=null){
            try {
                SaveLRModel(FilePath.getText()+"\\LogisticRegression.csv",GUI.logisticRegressionMethod.getCombinations(),GUI.logisticRegressionMethod.getFScore(),GUI.logisticRegressionMethod.getSensitivity(),GUI.logisticRegressionMethod.getSpecificity(),DataBase.ROC.DataTitle,GUI.logisticRegressionMethod.getWeight());
            } catch (IOException e) {
                flag=false;
                e.printStackTrace();
            }
        }
        if(ExportModel.isSelected()&&GUI.svmMethod!=null){
            try {
                SaveSVMModel(FilePath.getText()+"\\SVM.csv",GUI.svmMethod.getCombinations(),GUI.svmMethod.getFScore(),GUI.svmMethod.getSensitivity(),GUI.svmMethod.getSpecificity(),DataBase.ROC.DataTitle,GUI.svmMethod.getWeight(),GUI.svmMethod.getBias());
            } catch (IOException e) {
                flag=false;
                e.printStackTrace();
            }
        }
        if(ExportROCCurve.isSelected()){
            try {
                SaveROCCurve(FilePath.getText()+"\\ROC_Curve.csv",DataBase.csvFile.DataTitle,DataBase.ROC.auc,DataBase.ROC.CutOffPoints);
            } catch (IOException e) {
                flag=false;
                e.printStackTrace();
            }
        }

        if(flag) {
            ExportFile f = this;
            f.dispose();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExportFile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JCheckBox ExportLineChart;
    private javax.swing.JCheckBox ExportModel;
    private javax.swing.JCheckBox ExportROCCurve;
    protected javax.swing.JTextField FilePath;
    public javax.swing.JButton FilePicker;
    public javax.swing.JButton Save;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration
}